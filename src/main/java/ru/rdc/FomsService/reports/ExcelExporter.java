package ru.rdc.FomsService.reports;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.DefaultIndexedColorMap;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.File;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

import org.apache.poi.ss.usermodel.*;
import org.springframework.stereotype.Component;
import ru.rdc.FomsService.dto.InsuranceResponse;
import ru.rdc.FomsService.dto.Item;

import java.io.IOException;
import java.util.stream.Collectors;

import static org.thymeleaf.util.StringUtils.trim;

@Component
public class ExcelExporter {

    private static DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy", Locale.ENGLISH);

    public static void saveToExcel(List<InsuranceResponse> responses, List<Item> items, File file) {
        if (items == null || items.isEmpty()) {
            throw new IllegalArgumentException("–ù–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!");
        }

        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã");

            CellStyle headerStyle = getHeaderCellStyle(workbook);
            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Å—Ç—Ä–æ–∫ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏
            CellStyle redStyle = getHighlightRowStyle(workbook);
            CellStyle greenStyle = getGreenRowStyle(workbook);
            CellStyle blueStyle = getBlueRowStyle(workbook);  // —Å–∏–Ω—è—è –∑–∞–ª–∏–≤–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–∏—Å–æ–≤

            String[] headers = {
                    "Request ID", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ü—Ä–∏—á–∏–Ω–∞",
                    "–ò—Å—Ö. –§–∞–º–∏–ª–∏—è", "–ò—Å—Ö. –ò–º—è", "–ò—Å—Ö. –û—Ç—á–µ—Å—Ç–≤–æ", "–ò—Å—Ö. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ò—Å—Ö. –ú–û",
                    "–û—Ç–≤–µ—Ç: –§–∞–º–∏–ª–∏—è", "–û—Ç–≤–µ—Ç: –ò–º—è", "–û—Ç–≤–µ—Ç: –û—Ç—á–µ—Å—Ç–≤–æ", "–û—Ç–≤–µ—Ç: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–û—Ç–≤–µ—Ç: –ü–æ–ª",
                    "–¢–∏–ø –ø–æ–ª–∏—Å–∞", "–°–µ—Ä–∏—è", "–ü–æ–ª–∏—Å", "–ï–ù–ü", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–°–ú–û", "–ù–∞–∑–≤–∞–Ω–∏–µ –°–ú–û",
                    "–†–µ–µ—Å—Ç—Ä–æ–≤—ã–π ‚Ññ", "–¢–∏–ø –î–£–õ", "–°–µ—Ä–∏—è –î–£–õ", "–ù–æ–º–µ—Ä –î–£–õ", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏",
                    "–°–ù–ò–õ–°", "–ê–∫—Ç–∏–≤–Ω—ã–π", "–ê–¥—Ä–µ—Å", "–î–∞—Ç–∞ –ü", "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å", "–ò—Å—Ç–æ—á–Ω–∏–∫", "–ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏—Å"
            };

            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers[i]);
                cell.setCellStyle(headerStyle);
            }

            Map<Integer, InsuranceResponse> responseMap = responses.stream()
                    .collect(Collectors.toMap(InsuranceResponse::getRequestId, r -> r));

            int rowNum = 1;
            for (Item item : items) {
                Row row = sheet.createRow(rowNum++);
                int col = 0;
                int requestId = item.getRequestId();
                InsuranceResponse response = responseMap.get(requestId);

                boolean isFioDrEqual = false;
                boolean isPolicyEqual = false;
                boolean isActive = false;
                StringBuilder errorDetails = new StringBuilder();

                //CellStyle rowStyle = greenStyle;  // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

                if (response != null) {
                    // –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –§–ò–û, –î–† –∏ –ø–æ–ª–∏—Å–∞
                    isFioDrEqual = Objects.equals(toUpperTrim(item.getFam()), toUpperTrim(response.getFam()))
                            && Objects.equals(toUpperTrim(item.getIm()), toUpperTrim(response.getIm()))
                            && Objects.equals(toUpperTrim(item.getOt()), toUpperTrim(response.getOt()))
                            && areDatesEqual(item.getBirthDate(), response.getDr());

                    isPolicyEqual = Objects.equals(item.getNpolis(), response.getEnp());
                    isActive = response.isActive();

                    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –§–ò–û –∏ –î–†
                    if (!Objects.equals(toUpperTrim(item.getFam()), toUpperTrim(response.getFam()))) {
                        appendError(errorDetails, "–§–∞–º–∏–ª–∏—è");
                    }
                    if (!Objects.equals(toUpperTrim(item.getIm()), toUpperTrim(response.getIm()))) {
                        appendError(errorDetails, "–ò–º—è");
                    }
                    if (!Objects.equals(toUpperTrim(item.getOt()), toUpperTrim(response.getOt()))) {
                        appendError(errorDetails, "–û—Ç—á–µ—Å—Ç–≤–æ");
                    }
                    if (!areDatesEqual(item.getBirthDate(), response.getDr())) {
                        appendError(errorDetails, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è");
                    }

                    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Å–æ–≤
                    if (!Objects.equals(item.getNpolis(), response.getEnp())) {
                        appendError(errorDetails, isActive ? "–î—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª–∏—Å" : "–î—Ä—É–≥–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª–∏—Å");
                    }
                    if (!isActive) {
                        appendError(errorDetails, "–ü–æ–ª–∏—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π");
                    }
                }

                // üéØ –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π
                CellStyle rowStyle;
                if (isFioDrEqual) {
                    if (isPolicyEqual) {
                        rowStyle = isActive ? greenStyle : redStyle;
                    } else {
                        rowStyle = isActive ? greenStyle : redStyle;
                    }
                } else {
                    rowStyle = redStyle;
                }

                // ‚úçÔ∏è –ü–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —è—á–µ–π–∫–∏
                row.createCell(col++).setCellValue(requestId);
                row.createCell(col++).setCellValue(item.getS_com());
                //row.createCell(col++).setCellValue(errorDetails.toString());

                // –ï—Å–ª–∏ response == null, —Ç–æ –≤ –ø–æ–ª–µ "–ü—Ä–∏—á–∏–Ω–∞" –ø–∏—à–µ–º "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç"
                String reason = (response == null) ? "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç" : errorDetails.toString();
                row.createCell(col++).setCellValue(reason);

                row.createCell(col++).setCellValue(toUpperTrim(item.getFam()));
                row.createCell(col++).setCellValue(toUpperTrim(item.getIm()));
                row.createCell(col++).setCellValue(toUpperTrim(item.getOt()));
                row.createCell(col++).setCellValue(item.getBirthDate());
                row.createCell(col++).setCellValue(item.getNameMO());

                if (response != null) {
                    row.createCell(col++).setCellValue(toUpperTrim(response.getFam()));
                    row.createCell(col++).setCellValue(toUpperTrim(response.getIm()));
                    row.createCell(col++).setCellValue(toUpperTrim(response.getOt()));
                    row.createCell(col++).setCellValue(formatDate(response.getDr()));
                    row.createCell(col++).setCellValue(response.getW() == 1 ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π");
                    row.createCell(col++).setCellValue(response.getVpolis());
                    row.createCell(col++).setCellValue(response.getSpolis());
                    row.createCell(col++).setCellValue(response.getNpolis());
                    row.createCell(col++).setCellValue(response.getEnp());
                    row.createCell(col++).setCellValue(formatDate(response.getDatE_BEGIN()));
                    row.createCell(col++).setCellValue(formatDate(response.getDatE_END()));
                    row.createCell(col++).setCellValue(response.getSmo());
                    row.createCell(col++).setCellValue(response.getNamsmok());
                    row.createCell(col++).setCellValue(response.getReenom());
                    row.createCell(col++).setCellValue(response.getDoctype());
                    row.createCell(col++).setCellValue(response.getDocser());
                    row.createCell(col++).setCellValue(response.getDocnum());
                    row.createCell(col++).setCellValue(response.getDocorg());
                    row.createCell(col++).setCellValue(formatDate(response.getDocdate()));
                    row.createCell(col++).setCellValue(response.getSnils());
                    row.createCell(col++).setCellValue(response.isActive() ? "–î–∞" : "–ù–µ—Ç");
                    row.createCell(col++).setCellValue(response.getAdres());
                    row.createCell(col++).setCellValue(formatDate(response.getDatE_P()));
                    row.createCell(col++).setCellValue(response.getTerst());
                    row.createCell(col++).setCellValue(response.getName());
                    row.createCell(col++).setCellValue(response.getCorrect());
                    row.createCell(col++).setCellValue(response.getSource());
                    row.createCell(col++).setCellValue(response.getSourceNpolis());
                } else {
                    for (int i = 0; i < 28; i++) {
                        row.createCell(col++).setCellValue("");
                    }
                }

                // üé® –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
                for (int i = 0; i < headers.length; i++) {
                    Cell cell = row.getCell(i);
                    if (cell == null) cell = row.createCell(i);
                    cell.setCellStyle(rowStyle);
                }
            }

            for (int i = 0; i < headers.length; i++) {
                sheet.autoSizeColumn(i);
            }

            try (FileOutputStream out = new FileOutputStream(file)) {
                workbook.write(out);
            }

        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ Excel: " + e.getMessage(), e);
        }
    }

    private static String toUpperTrim(String s) {
        return s == null ? null : s.trim().toUpperCase();
    }

    private static boolean areDatesEqual(String itemDate, String responseDate) {
        if (itemDate == null || responseDate == null) return false;
        try {
            LocalDate d1 = LocalDate.parse(itemDate, DateTimeFormatter.ofPattern("dd.MM.yyyy"));
            LocalDate d2 = LocalDate.parse(responseDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            return d1.equals(d2);
        } catch (DateTimeParseException e) {
            return false;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è —Å —Ü–≤–µ—Ç–æ–º #ffd1d1
    private static CellStyle getHighlightRowStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        XSSFColor color = new XSSFColor(new java.awt.Color(255, 209, 209), new DefaultIndexedColorMap());
        ((XSSFCellStyle) style).setFillForegroundColor(color);
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        return style;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è —Å —Ü–≤–µ—Ç–æ–º #ffd1d1
    private static CellStyle getGreenRowStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ #deffc9 –≤ RGB
        int red = 0xDE;   // 222
        int green = 0xFF; // 255
        int blue = 0xC9;  // 201

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RGB
        XSSFColor color = new XSSFColor(new java.awt.Color(red, green, blue), new DefaultIndexedColorMap());
        ((XSSFCellStyle) style).setFillForegroundColor(color);
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        return style;
    }

    private static CellStyle getBlueRowStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        XSSFColor color = new XSSFColor(new java.awt.Color(173, 216, 230), new DefaultIndexedColorMap()); // —Å–∏–Ω–∏–π
        ((XSSFCellStyle) style).setFillForegroundColor(color);
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        return style;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    private static CellStyle getHeaderCellStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        Font font = workbook.createFont();
        font.setBold(true);
        font.setFontName("Arial");
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.CENTER);
        return style;
    }

    private static String formatDate(String dateStr) {
        if (dateStr == null || dateStr.isEmpty()) {
            return "";
        }
        return LocalDate.parse(dateStr).format(formatter);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    private static void appendError(StringBuilder sb, String error) {
        if (sb.length() > 0) {
            sb.append(", ");
        }
        sb.append(error);
    }

    private static String normalize(String value) {
        return value == null ? "" : value.trim().replace("\u00A0", "").replaceAll("\\s+", "");
    }
}