package ru.rdc.FomsService.reports;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.DefaultIndexedColorMap;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.File;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

import org.apache.poi.ss.usermodel.*;
import org.springframework.stereotype.Component;
import ru.rdc.FomsService.dto.InsuranceResponse;
import ru.rdc.FomsService.dto.Item;

import java.io.IOException;

@Component
public class ExcelExporter {

    private static DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy", Locale.ENGLISH);

    public static void saveToExcel(List<InsuranceResponse> responses, List<Item> items, File file) {
        if (responses == null || responses.isEmpty()) {
            throw new IllegalArgumentException("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
        }

        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("–û—Ç–≤–µ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞");

            // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            String[] headers = {
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ü—Ä–∏—á–∏–Ω–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è", "–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è", "–ò—Å—Ö–æ–¥–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ",
                    "–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ò—Å—Ö–æ–¥–Ω–æ–µ –ú–û", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ",
                    "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–æ–ª", "–¢–∏–ø –ø–æ–ª–∏—Å–∞", "–°–µ—Ä–∏—è", "–ü–æ–ª–∏—Å", "–ï–ù–ü",
                    "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–°–ú–û", "–ù–∞–∑–≤–∞–Ω–∏–µ –°–ú–û", "–†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä",
                    "–¢–∏–ø –î–£–õ", "–°–µ—Ä–∏—è –î–£–õ", "–ù–æ–º–µ—Ä –î–£–õ", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", "–°–ù–ò–õ–°",
                    "–ê–∫—Ç–∏–≤–Ω—ã–π", "–ê–¥—Ä–µ—Å", "–î–∞—Ç–∞ –ü", "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å", "–ò—Å—Ç–æ—á–Ω–∏–∫","–ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏—Å"
            };

            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers[i]);
                cell.setCellStyle(getHeaderCellStyle(workbook));
            }

            // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ Item –ø–æ npolis
            Map<String, Item> itemMap = new HashMap<>();
            for (Item item : items) {
                itemMap.put(normalize(item.getNpolis()), item);
            }

            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Å—Ç—Ä–æ–∫ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏
            CellStyle highlightStyle = getHighlightRowStyle(workbook);
            CellStyle greenStyle = getGreenRowStyle(workbook);

            int rowNum = 1;
            for (InsuranceResponse response : responses) {
                Row row = sheet.createRow(rowNum++);

                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ Item
                String key = response.getSourceNpolis() != null ? normalize(response.getSourceNpolis()) : "";
                if (key.isEmpty() && response.getEnp() != null) {
                    key = normalize(response.getEnp());
                }
                Item item = itemMap.get(key);

                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ Item
                //Item item = itemMap.get(normalize(response.getSourceNpolis()));
                if (item == null) {
                    System.out.println("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω item –ø–æ SourceNpolis: '" + response.getSourceNpolis() + "'");
                    System.out.println("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ itemMap: " + itemMap.keySet());
                }

                row.createCell(0).setCellValue(item != null ? item.getS_com() : ""); // –û—à–∏–±–∫–∞

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                boolean hasDifference = false;
                boolean isInactive = !response.isActive();
                StringBuilder errorDetails = new StringBuilder();

                // –ï—Å–ª–∏ item –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª–∏—Å—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                if (item == null || !Objects.equals(item.getNpolis(), response.getEnp())) {
                    appendError(errorDetails, "–ü–æ–ª–∏—Å—ã –≤ –∑–∞–ø—Ä–æ—Å–µ –∏ –æ—Ç–≤–µ—Ç–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                    hasDifference = true;
                }

                if (isInactive) {
                    errorDetails.append("–ü–æ–ª–∏—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π");
                }

                if (item != null) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ null
                    // –§–∞–º–∏–ª–∏—è
                    if (item.getFam() != null && response.getFam() != null) {
                        if (!Objects.equals(item.getFam().toUpperCase().trim(), response.getFam().toUpperCase().trim())) {
                            appendError(errorDetails, "–§–∞–º–∏–ª–∏—è");
                            hasDifference = true;
                        }
                    } else if (item.getFam() != response.getFam()) {  // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π null
                        appendError(errorDetails, "–§–∞–º–∏–ª–∏—è");
                        hasDifference = true;
                    }

                    // –ò–º—è
                    if (item.getIm() != null && response.getIm() != null) {
                        if (!Objects.equals(item.getIm().toUpperCase().trim(), response.getIm().toUpperCase().trim())) {
                            appendError(errorDetails, "–ò–º—è");
                            hasDifference = true;
                        }
                    } else if (item.getIm() != response.getIm()) {  // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π null
                        appendError(errorDetails, "–ò–º—è");
                        hasDifference = true;
                    }

                    // –û—Ç—á–µ—Å—Ç–≤–æ
                    if (item.getOt() != null && response.getOt() != null) {
                        if (!Objects.equals(item.getOt().toUpperCase().trim(), response.getOt().toUpperCase().trim())) {
                            appendError(errorDetails, "–û—Ç—á–µ—Å—Ç–≤–æ");
                            hasDifference = true;
                        }
                    } else if (item.getOt() != response.getOt()) {  // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π null
                        appendError(errorDetails, "–û—Ç—á–µ—Å—Ç–≤–æ");
                        hasDifference = true;
                    }

                    // –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                    if (item.getBirthDate() != null && response.getDr() != null) {
                        try {
                            LocalDate itemBirthDate = LocalDate.parse(item.getBirthDate(), DateTimeFormatter.ofPattern("dd.MM.yyyy"));
                            LocalDate responseBirthDate = LocalDate.parse(response.getDr(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                            if (!Objects.equals(itemBirthDate, responseBirthDate)) {
                                appendError(errorDetails, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è");
                                hasDifference = true;
                            }
                        } catch (DateTimeParseException e) {
                            appendError(errorDetails, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è");
                            hasDifference = true;
                        }
                    } else if (item.getBirthDate() != response.getDr()) {  // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π null
                        appendError(errorDetails, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è");
                        hasDifference = true;
                    }
                }

                // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
                row.createCell(1).setCellValue(errorDetails.toString()); // –û—à–∏–±–∫–∞ —Å–≤–æ—è
                row.createCell(2).setCellValue(item != null ? item.getFam().toUpperCase() : ""); // –ò—Å—Ö–æ–¥–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è
                row.createCell(3).setCellValue(item != null ? item.getIm().toUpperCase() : ""); // –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è
                row.createCell(4).setCellValue(item != null && item.getOt() != null ? item.getOt().toUpperCase() : ""); // –ò—Å—Ö–æ–¥–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ
                row.createCell(4).setCellValue(""); // –ò—Å—Ö–æ–¥–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ
                row.createCell(5).setCellValue(item != null ? item.getBirthDate() : ""); // –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                row.createCell(6).setCellValue(item != null ? item.getNameMO() : ""); // –ò—Å—Ö–æ–¥–Ω–æ–µ –ú–û
                row.createCell(7).setCellValue(response.getFam()); // –§–∞–º–∏–ª–∏—è
                row.createCell(8).setCellValue(response.getIm()); // –ò–º—è
                row.createCell(9).setCellValue(response.getOt()); // –û—Ç—á–µ—Å—Ç–≤–æ
                row.createCell(10).setCellValue(formatDate(response.getDr())); // –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                row.createCell(11).setCellValue(response.getW() == 1 ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π"); // –ü–æ–ª
                row.createCell(12).setCellValue(response.getVpolis()); // –¢–∏–ø –ø–æ–ª–∏—Å–∞
                row.createCell(13).setCellValue(response.getSpolis()); // –°–µ—Ä–∏—è
                row.createCell(14).setCellValue(response.getNpolis()); // –ü–æ–ª–∏—Å
                row.createCell(15).setCellValue(response.getEnp()); // –ï–ù–ü
                row.createCell(16).setCellValue(formatDate(response.getDatE_BEGIN())); // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
                row.createCell(17).setCellValue(formatDate(response.getDatE_END())); // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                row.createCell(18).setCellValue(response.getSmo()); // –°–ú–û
                row.createCell(19).setCellValue(response.getNamsmok()); // –ù–∞–∑–≤–∞–Ω–∏–µ –°–ú–û
                row.createCell(20).setCellValue(response.getReenom()); // –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä
                row.createCell(21).setCellValue(response.getDoctype()); // –¢–∏–ø –î–£–õ
                row.createCell(22).setCellValue(response.getDocser()); // –°–µ—Ä–∏—è –î–£–õ
                row.createCell(23).setCellValue(response.getDocnum()); // –ù–æ–º–µ—Ä –î–£–õ
                row.createCell(24).setCellValue(response.getDocorg()); // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                row.createCell(25).setCellValue(formatDate(response.getDocdate())); // –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
                row.createCell(26).setCellValue(response.getSnils()); // –°–ù–ò–õ–°
                row.createCell(27).setCellValue(response.isActive() ? "–î–∞" : "–ù–µ—Ç"); // –ê–∫—Ç–∏–≤–Ω—ã–π
                row.createCell(28).setCellValue(response.getAdres()); // –ê–¥—Ä–µ—Å
                row.createCell(29).setCellValue(formatDate(response.getDatE_P())); // –î–∞—Ç–∞ –ü
                row.createCell(30).setCellValue(response.getTerst()); // –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è
                row.createCell(31).setCellValue(response.getName()); // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                row.createCell(32).setCellValue(response.getCorrect()); // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                row.createCell(33).setCellValue(response.getSource()); // –ò—Å—Ç–æ—á–Ω–∏–∫
                row.createCell(34).setCellValue(response.getSourceNpolis()); // –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏—Å

                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª–∏—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π, –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                if (hasDifference || isInactive) {
                    for (int i = 0; i < headers.length; i++) {
                        Cell cell = row.getCell(i);
                        if (cell == null) {
                            cell = row.createCell(i);
                        }
                        cell.setCellStyle(highlightStyle);
                    }
                } else {
                    for (int i = 0; i < headers.length; i++) {
                        row.getCell(i).setCellStyle(greenStyle);
                    }
                }
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            for (int i = 0; i < headers.length; i++) {
                sheet.autoSizeColumn(i);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            try (FileOutputStream fileOut = new FileOutputStream(file)) {
                workbook.write(fileOut);
            }

        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage(), e);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è —Å —Ü–≤–µ—Ç–æ–º #ffd1d1
    private static CellStyle getHighlightRowStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        XSSFColor color = new XSSFColor(new java.awt.Color(255, 209, 209), new DefaultIndexedColorMap());
        ((XSSFCellStyle) style).setFillForegroundColor(color);
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        return style;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è —Å —Ü–≤–µ—Ç–æ–º #ffd1d1
    private static CellStyle getGreenRowStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ #deffc9 –≤ RGB
        int red = 0xDE;   // 222
        int green = 0xFF; // 255
        int blue = 0xC9;  // 201

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RGB
        XSSFColor color = new XSSFColor(new java.awt.Color(red, green, blue), new DefaultIndexedColorMap());
        ((XSSFCellStyle) style).setFillForegroundColor(color);
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        return style;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    private static CellStyle getHeaderCellStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        Font font = workbook.createFont();
        font.setBold(true);
        font.setFontName("Arial");
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.CENTER);
        return style;
    }

    private static String formatDate(String dateStr) {
        if (dateStr == null || dateStr.isEmpty()) {
            return "";
        }
        return LocalDate.parse(dateStr).format(formatter);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    private static void appendError(StringBuilder sb, String error) {
        if (sb.length() > 0) {
            sb.append(", ");
        }
        sb.append(error);
    }

    private static String normalize(String value) {
        return value == null ? "" : value.trim().replace("\u00A0", "").replaceAll("\\s+", "");
    }
}